<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/config/RequestLoggingFilterConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/config/RequestLoggingFilterConfig.java" />
              <option name="updatedContent" value="package io.github.talelin.latticy.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.filter.CommonsRequestLoggingFilter;&#10;&#10;@Configuration&#10;public class RequestLoggingFilterConfig {&#10;&#10;    @Bean&#10;    public CommonsRequestLoggingFilter requestLoggingFilter() {&#10;        CommonsRequestLoggingFilter loggingFilter = new CommonsRequestLoggingFilter();&#10;        loggingFilter.setIncludeClientInfo(true);&#10;        loggingFilter.setIncludeQueryString(true);&#10;        loggingFilter.setIncludePayload(true);&#10;        loggingFilter.setIncludeHeaders(false);&#10;        loggingFilter.setMaxPayloadLength(10000);&#10;        loggingFilter.setAfterMessagePrefix(&quot;REQUEST DATA : &quot;);&#10;        return loggingFilter;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/config/RequestWrapperConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/config/RequestWrapperConfig.java" />
              <option name="updatedContent" value="package io.github.talelin.latticy.config;&#10;&#10;import org.springframework.boot.web.servlet.FilterRegistrationBean;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.core.Ordered;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;import org.springframework.web.util.ContentCachingRequestWrapper;&#10;&#10;import javax.servlet.FilterChain;&#10;import javax.servlet.ServletException;&#10;import javax.servlet.http.HttpServletRequest;&#10;import javax.servlet.http.HttpServletResponse;&#10;import java.io.IOException;&#10;&#10;/**&#10; * Wraps the HttpServletRequest in a ContentCachingRequestWrapper to allow multiple reads of the request body.&#10; */&#10;@Configuration&#10;public class RequestWrapperConfig {&#10;&#10;    @Bean&#10;    public FilterRegistrationBean&lt;OncePerRequestFilter&gt; requestWrapperFilter() {&#10;        FilterRegistrationBean&lt;OncePerRequestFilter&gt; registrationBean = new FilterRegistrationBean&lt;&gt;();&#10;        registrationBean.setFilter(new OncePerRequestFilter() {&#10;            @Override&#10;            protected void doFilterInternal(HttpServletRequest request,&#10;                                            HttpServletResponse response,&#10;                                            FilterChain filterChain) throws ServletException, IOException {&#10;                ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper(request);&#10;                filterChain.doFilter(wrappedRequest, response);&#10;            }&#10;        });&#10;        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);&#10;        return registrationBean;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/model/UserDO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/model/UserDO.java" />
              <option name="originalContent" value="package io.github.talelin.latticy.model;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.io.Serializable;&#10;&#10; * @author pedro@TaleLin&#10; * @author Juzi@TaleLin&#10; */&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@TableName(&quot;lin_user&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;public class UserDO extends BaseModel implements Serializable {&#10;&#10;    private static final long serialVersionUID = -1463999384554707735L;&#10;&#10;    /**&#10;     * 用户名，唯一&#10;     */&#10;    private String username;&#10;&#10;    /**&#10;     * 用户昵称&#10;     */&#10;    private String nickname;&#10;&#10;    /**&#10;     * 头像url&#10;     */&#10;    private String avatar;&#10;&#10;    /**&#10;     * 邮箱&#10;     */&#10;    private String email;&#10;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package io.github.talelin.latticy.model;&#10;&#10;import com.baomidou.mybatisplus.annotation.TableField;&#10;import com.baomidou.mybatisplus.annotation.TableName;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;/**&#10; * @author pedro@TaleLin&#10; * @author Juzi@TaleLin&#10; */&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@TableName(&quot;lin_user&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;public class UserDO extends BaseModel implements Serializable {&#10;&#10;    private static final long serialVersionUID = -1463999384554707735L;&#10;&#10;    /**&#10;     * 用户名，唯一&#10;     */&#10;    private String username;&#10;&#10;    /**&#10;     * 用户昵称&#10;     */&#10;    private String nickname;&#10;&#10;    /**&#10;     * 头像url&#10;     */&#10;    private String avatar;&#10;&#10;    /**&#10;     * 邮箱&#10;     */&#10;    private String email;&#10;&#10;    /**&#10;     * 用户身份信息列表&#10;     */&#10;    @TableField(exist = false)&#10;    private List&lt;UserIdentityDO&gt; identities;&#10;&#10;    /**&#10;     * 获取支付宝用户ID&#10;     */&#10;    public String getAlipayUserId() {&#10;        if (identities == null) {&#10;            return null;&#10;        }&#10;        return identities.stream()&#10;                .filter(identity -&gt; &quot;ALIPAY&quot;.equals(identity.getIdentityType()))&#10;                .map(UserIdentityDO::getIdentifier)&#10;                .findFirst()&#10;                .orElse(null);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/service/ContentRiskService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/talelin/latticy/service/ContentRiskService.java" />
              <option name="originalContent" value="package io.github.talelin.latticy.service;&#10;&#10;import com.alipay.api.AlipayApiException;&#10;import com.alipay.api.AlipayClient;&#10;import com.alipay.api.DefaultAlipayClient;&#10;import com.alipay.api.domain.AlipaySecurityRiskContentSyncDetectModel;&#10;import com.alipay.api.request.AlipaySecurityRiskContentSyncDetectRequest;&#10;import com.alipay.api.response.AlipaySecurityRiskContentSyncDetectResponse;&#10;import io.github.talelin.latticy.common.configuration.AlipayProperties;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.Collections;&#10;import java.util.UUID;&#10;&#10;/**&#10; * Service for invoking Alipay content risk detection API&#10; */&#10;@Service&#10;public class ContentRiskService {&#10;&#10;    @Autowired&#10;    private AlipayProperties properties;&#10;&#10;    private AlipayClient buildClient() {&#10;        return new DefaultAlipayClient(&#10;                properties.getGateway(),&#10;                properties.getAppId(),&#10;                properties.getAppPrivateKey(),&#10;                &quot;json&quot;,&#10;                &quot;UTF-8&quot;,&#10;                properties.getAlipayPublicKey(),&#10;                &quot;RSA2&quot;);&#10;    }&#10;&#10;    public boolean detect(String contentType, String data) throws AlipayApiException {&#10;        AlipayClient client = buildClient();&#10;        AlipaySecurityRiskContentSyncDetectRequest request = new AlipaySecurityRiskContentSyncDetectRequest();&#10;        AlipaySecurityRiskContentSyncDetectModel model = new AlipaySecurityRiskContentSyncDetectModel();&#10;        model.setRequestId(UUID.randomUUID().toString());&#10;        model.setProducts(properties.getRiskProducts());&#10;        model.setChannel(properties.getRiskChannel());&#10;        model.setContentType(contentType);&#10;        model.setDataList(Collections.singletonList(data));&#10;        request.setBizModel(model);&#10;        AlipaySecurityRiskContentSyncDetectResponse response = client.execute(request);&#10;        if (!response.isSuccess()) {&#10;            throw new AlipayApiException(&quot;content detect failed:&quot; + response.getSubMsg());&#10;        }&#10;        return &quot;pass&quot;.equalsIgnoreCase(response.getSuggestion());&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package io.github.talelin.latticy.service;&#10;&#10;import com.alipay.api.AlipayApiException;&#10;import com.alipay.api.AlipayClient;&#10;import com.alipay.api.DefaultAlipayClient;&#10;import com.alipay.api.domain.AlipaySecurityRiskContentSyncDetectModel;&#10;import com.alipay.api.request.AlipaySecurityRiskContentSyncDetectRequest;&#10;import com.alipay.api.response.AlipaySecurityRiskContentSyncDetectResponse;&#10;import io.github.talelin.latticy.common.configuration.AlipayProperties;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.Collections;&#10;import java.util.UUID;&#10;&#10;/**&#10; * Service for invoking Alipay content risk detection API&#10; */&#10;@Service&#10;public class ContentRiskService {&#10;&#10;    private static final Logger log = LoggerFactory.getLogger(ContentRiskService.class);&#10;&#10;    @Autowired&#10;    private AlipayProperties properties;&#10;&#10;    private AlipayClient buildClient() {&#10;        return new DefaultAlipayClient(&#10;                properties.getGateway(),&#10;                properties.getAppId(),&#10;                properties.getAppPrivateKey(),&#10;                &quot;json&quot;,&#10;                &quot;UTF-8&quot;,&#10;                properties.getAlipayPublicKey(),&#10;                &quot;RSA2&quot;);&#10;    }&#10;&#10;    public boolean detect(String contentType, String data) throws AlipayApiException {&#10;        AlipayClient client = buildClient();&#10;&#10;        // 打印所有入参信息&#10;        log.info(&quot;=== ContentRiskService.detect 入参信息 ===&quot;);&#10;        log.info(&quot;contentType: {}&quot;, contentType);&#10;        log.info(&quot;data: {}&quot;, data);&#10;        log.info(&quot;client: {}&quot;, client);&#10;        log.info(&quot;client.getClass(): {}&quot;, client.getClass());&#10;        log.info(&quot;properties.getGateway(): {}&quot;, properties.getGateway());&#10;        log.info(&quot;properties.getAppId(): {}&quot;, properties.getAppId());&#10;        log.info(&quot;properties.getRiskProducts(): {}&quot;, properties.getRiskProducts());&#10;        log.info(&quot;properties.getRiskChannel(): {}&quot;, properties.getRiskChannel());&#10;&#10;        AlipaySecurityRiskContentSyncDetectRequest request = new AlipaySecurityRiskContentSyncDetectRequest();&#10;        AlipaySecurityRiskContentSyncDetectModel model = new AlipaySecurityRiskContentSyncDetectModel();&#10;        model.setRequestId(UUID.randomUUID().toString());&#10;        model.setProducts(properties.getRiskProducts());&#10;        model.setChannel(properties.getRiskChannel());&#10;        model.setContentType(contentType);&#10;        model.setDataList(Collections.singletonList(data));&#10;        request.setBizModel(model);&#10;        AlipaySecurityRiskContentSyncDetectResponse response = client.execute(request);&#10;        if (!response.isSuccess()) {&#10;            throw new AlipayApiException(&quot;content detect failed:&quot; + response.getSubMsg());&#10;        }&#10;        return &quot;pass&quot;.equalsIgnoreCase(response.getSuggestion());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>